{"version":3,"file":"static/js/795.5192b7c9.chunk.js","mappings":"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","sources":["components/Hospital.tsx","components/sliders/HorizontalSlider.tsx","components/sliders/HorizontalSliderPreview.tsx","components/sliders/SkeletonLoader.tsx","components/sliders/Title.tsx"],"sourcesContent":["// Hospital.tsx\r\nimport { forwardRef, useRef, useState, useMemo, useCallback } from \"react\";\r\nimport { toast } from 'react-hot-toast';\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { hospitalPhotos } from \"../data/data\";\r\nimport HorizontalSlider, { getPerHorizontalPageValue } from './sliders/HorizontalSlider';\r\nimport Title from './sliders/Title';\r\nimport SiteContainerBackground from './sliders/SiteContainerBackground';\r\nimport HorizontalSliderPreview from './sliders/HorizontalSliderPreview';\r\n\r\nconst Hospital = forwardRef<HTMLDivElement>((_, ref) => {\r\n  const { t } = useTranslation(\"Hospital\");\r\n  const [selectedSlide] = useState(0);\r\n  const splideInstanceRef = useRef<Splide | null>(null);\r\n  const [showConfirmation, setShowConfirmation] = useState(true);\r\n  const [fadeOut, setFadeOut] = useState(false);\r\n  const sliders = useMemo(() => (\r\n    hospitalPhotos\r\n      .map((photo) => photo?.img)\r\n      .filter((img): img is string => img !== undefined)\r\n  ), []);\r\n\r\n  const handlePreviewClick = useCallback((index: number) => {\r\n    if (splideInstanceRef.current) {\r\n      splideInstanceRef.current.go(index);\r\n    }\r\n  }, []);\r\n\r\n  const handleConfirm = (event: React.MouseEvent) => {\r\n    event.stopPropagation();\r\n    setFadeOut(true);\r\n    setTimeout(() => {\r\n      setShowConfirmation(false);\r\n      setFadeOut(false);\r\n      toast.success(t(\"hospital.age.success\"));\r\n    }, 300);\r\n  };\r\n\r\n  const handleContainerClick = () => {\r\n    if (showConfirmation) {\r\n      toast.error(t(\"hospital.age.error\"));\r\n    }\r\n  };\r\n\r\n  const buttonAge = (\r\n    <div className={`absolute cursor-not-allowed bottom-2 left-2 px-5 w-[calc(100%-1rem)] ssm:h-[calc(100%-3.2rem)] sm:h-[calc(100%-3.3rem)] md:h-[calc(100%-3.7rem)] z-50 inline-flex items-center justify-center backdrop-blur-sm bg-gradient-to-b from-blue-600/60 to-amber-400/90 drop-shadow-lg rounded-2xl transition-opacity duration-1000 ${fadeOut ? 'opacity-0' : 'opacity-100'}`}>\r\n      <button className=\"flex flex-wrap justify-center items-center ssm:py-2 sm:py-[0px] ssm:h-auto sm:h-[40px] md:h-[55px] bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 border-blue-600 shadow-lg shadow-blue-500/50 ssm:rounded-[12px] md:rounded-[15px]\" onClick={handleConfirm}>\r\n        <span className=\"text-white ssm:text-[22px] md:text-[26px]  xl:text-[30px] ssm:-mt-1  sm:-mt-0.5 md:-mt-0.5 lg:-mt-0.5 xl:-mt-1.5 uppercase\">{t(\"age18\")}</span>\r\n      </button>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div ref={ref} onClick={handleContainerClick}>\r\n      <SiteContainerBackground id={`category${6}`} data-testid=\"war_medicine-wrapper\">\r\n        <Title text={t(\"war_medicine\")} data-testid=\"hospital_title\" />\r\n        {showConfirmation && (\r\n          buttonAge\r\n        )}\r\n        <HorizontalSlider photos={sliders} selectedSlide={selectedSlide} setSplideInstance={splide => splideInstanceRef.current = splide} autoplay={false} />\r\n        <HorizontalSliderPreview photos={sliders} selectedSlide={selectedSlide} onPreviewClick={handlePreviewClick} getPerPageValue={getPerHorizontalPageValue} />\r\n      </SiteContainerBackground>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Hospital;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport SkeletonLoader from './SkeletonLoader'; // Импортируем компонент\r\n\r\ninterface SliderProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  setSplideInstance: (splide: Splide | null) => void;\r\n  autoplay?: boolean;\r\n}\r\n\r\nexport const getPerHorizontalPageValue = () => {\r\n  if (window.innerWidth < 640) {\r\n    return 2;\r\n  } else if (window.innerWidth < 768) {\r\n    return 3;\r\n  } else if (window.innerWidth < 1024) {\r\n    return 4;\r\n  } else if (window.innerWidth < 1280) {\r\n    return 5;\r\n  } else {\r\n    return 6;\r\n  }\r\n};\r\n\r\nconst HorizontalSlider = ({ photos, selectedSlide, setSplideInstance, autoplay = true }: SliderProps) => {\r\n  const splideRef = useRef<HTMLDivElement | null>(null);\r\n  const [loading, setLoading] = useState<boolean[]>(Array(photos.length).fill(true));\r\n\r\n  useEffect(() => {\r\n    if (splideRef.current) {\r\n      const splideInstance = new Splide(splideRef.current, {\r\n        type: \"slide\",\r\n        perPage: 1,\r\n        perMove: 1,\r\n        rewind: true,\r\n        arrows: true,\r\n        focus: \"center\",\r\n        pagination: true,\r\n        autoplay,\r\n        interval: 4000,\r\n      });\r\n\r\n      setSplideInstance(splideInstance);\r\n\r\n      splideInstance.on(\"mounted\", () => {\r\n        splideInstance.go(selectedSlide);\r\n      });\r\n\r\n      splideInstance.mount();\r\n\r\n      return () => {\r\n        splideInstance.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, setSplideInstance, autoplay]);\r\n\r\n  const handleImageLoad = (index: number) => {\r\n    setLoading((prevLoading) => {\r\n      const newLoading = [...prevLoading];\r\n      newLoading[index] = false;\r\n      return newLoading;\r\n    });\r\n  };\r\n  const commonStyles = \"ssm:h-[440px] lg:h-[600px] xl:h-[700px] w-full object-cover rounded-lg\";\r\n  return (\r\n      <section id=\"horizontal_thumbnail_carousel\" ref={splideRef} className=\"splide pb-2 pt-0.5\">\r\n        <div className=\"splide__track rounded-2xl\">\r\n          <ul className=\"splide__list\">\r\n            {photos.map((photo, slideIndex) => (\r\n                <li key={slideIndex} className={`splide__slide`} onContextMenu={(e) => e.preventDefault()}>\r\n                  {loading[slideIndex] && (\r\n                      <SkeletonLoader className={commonStyles} />\r\n                  )}\r\n                  <img\r\n                      className={`duration-300 ease-out ${commonStyles} ${loading[slideIndex] ? 'hidden' : ''}`}\r\n                      src={photo}\r\n                      alt={`Slide ${slideIndex}`}\r\n                      onLoad={() => handleImageLoad(slideIndex)}\r\n                  />\r\n                </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSlider;\r\n","// HorizontalSliderPreview.tsx\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport SkeletonLoader from './SkeletonLoader'; // Import SkeletonLoader\r\n\r\ninterface PreviewSliderHorizontalProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  onPreviewClick: (index: number) => void;\r\n  getPerPageValue: () => number;\r\n}\r\n\r\nconst HorizontalSliderPreview = ({ photos, selectedSlide, onPreviewClick, getPerPageValue }: PreviewSliderHorizontalProps) => {\r\n  const previewSplideRef = useRef<HTMLDivElement | null>(null);\r\n  const [loading, setLoading] = useState<boolean[]>(Array(photos.length).fill(true));\r\n\r\n  useEffect(() => {\r\n    if (previewSplideRef.current) {\r\n      const previewSplide = new Splide(previewSplideRef.current, {\r\n        type: \"slide\",\r\n        perPage: getPerPageValue(),\r\n        gap: 5,\r\n        rewind: true,\r\n        pagination: false,\r\n        focus: \"center\",\r\n      });\r\n\r\n      previewSplide.on(\"mounted\", () => {\r\n        const slides = previewSplideRef.current!.querySelectorAll(\".splide__slide\");\r\n        slides.forEach((slide, index) => {\r\n          slide.addEventListener(\"click\", () => {\r\n            onPreviewClick(index);\r\n          });\r\n        });\r\n      });\r\n\r\n      previewSplide.mount();\r\n\r\n      const handleResize = () => {\r\n        const newPerPage = getPerPageValue();\r\n        previewSplide.go(selectedSlide);\r\n        previewSplide.options.perPage = newPerPage;\r\n        previewSplide.refresh();\r\n      };\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n        previewSplide.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, getPerPageValue, onPreviewClick]);\r\n\r\n  const handleImageLoad = (index: number) => {\r\n    setLoading((prevLoading) => {\r\n      const newLoading = [...prevLoading];\r\n      newLoading[index] = false;\r\n      return newLoading;\r\n    });\r\n  };\r\n\r\n  const commonStyles = \"h-[100px] w-full object-cover rounded-2xl\";\r\n  return (\r\n      <section id=\"thumbnail_carousel_preview\" ref={previewSplideRef} className=\"splide\">\r\n        <div className=\"splide__track\">\r\n          <ul className=\"splide__list\">\r\n            {photos.map((photo, previewIndex) => (\r\n                <li\r\n                    key={previewIndex}\r\n                    className=\"splide__slide\"\r\n                    onClick={() => onPreviewClick(previewIndex)}\r\n                    onContextMenu={(e) => e.preventDefault()}\r\n                >\r\n                  {loading[previewIndex] && (\r\n                      <SkeletonLoader className={commonStyles} />\r\n                  )}\r\n                  <img\r\n                      className={`duration-300 ease-out ${commonStyles} ${loading[previewIndex] ? 'hidden' : ''}`}\r\n                      src={photo}\r\n                      alt={`Preview ${previewIndex}`}\r\n                      onLoad={() => handleImageLoad(previewIndex)}\r\n                  />\r\n                </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSliderPreview;\r\n","// SkeletonLoader.tsx\r\nimport React from \"react\";\r\n\r\ninterface SkeletonLoaderProps {\r\n    className?: string;\r\n}\r\n\r\nconst SkeletonLoader: React.FC<SkeletonLoaderProps> = ({ className }) => {\r\n    return (\r\n        <div className={`animate-pulse bg-gray-300 ${className}`}>\r\n            {/* Пустой div для отображения скелетон-лоадера */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SkeletonLoader;\r\n","// Title.tsx\r\nimport React from 'react';\r\n\r\ninterface TitleProps {\r\n  text: string;\r\n}\r\n\r\nconst Title: React.FC<TitleProps> = ({ text }) => (\r\n  <h3 className=\"flex justify-center mb-1 uppercase\" >\r\n    <span className=\"w-full justify-center ssm:py-2 sm:py-[0px] ssm:h-[29px] sm:h-[31px] md:h-[38px] flex text-white  bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 border-blue-600 shadow-lg shadow-blue-500/50 ssm:rounded-[12px] md:rounded-[15px]\">\r\n      <span className=\"text-white ssm:text-[22px] md:text-[26px] xl:text-[30px] ssm:-mt-[11px] sm:-mt-0.5 md:-mt-0.5 lg:-mt-0.5 xl:-mt-[4px] mx-4\">\r\n        {text}\r\n      </span>\r\n    </span>\r\n  </h3>\r\n);\r\n\r\nexport default Title;"],"names":["forwardRef","_","ref","t","useTranslation","selectedSlide","useState","splideInstanceRef","useRef","showConfirmation","setShowConfirmation","fadeOut","setFadeOut","sliders","useMemo","hospitalPhotos","map","photo","img","filter","undefined","handlePreviewClick","useCallback","index","current","go","buttonAge","_jsx","className","children","onClick","event","stopPropagation","setTimeout","toast","success","handleContainerClick","error","_jsxs","SiteContainerBackground","id","Title","text","HorizontalSlider","photos","setSplideInstance","splide","autoplay","HorizontalSliderPreview","onPreviewClick","getPerPageValue","getPerHorizontalPageValue","window","innerWidth","_ref","splideRef","loading","setLoading","Array","length","fill","useEffect","splideInstance","Splide","type","perPage","perMove","rewind","arrows","focus","pagination","interval","on","mount","destroy","commonStyles","slideIndex","onContextMenu","e","preventDefault","SkeletonLoader","src","alt","onLoad","handleImageLoad","prevLoading","newLoading","previewSplideRef","previewSplide","gap","querySelectorAll","forEach","slide","addEventListener","handleResize","newPerPage","options","refresh","removeEventListener","previewIndex"],"sourceRoot":""}