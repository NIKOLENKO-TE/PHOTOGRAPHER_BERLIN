{"version":3,"file":"static/js/623.0f15842c.chunk.js","mappings":"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","sources":["components/AID.tsx","components/sliders/HorizontalSlider.tsx","components/sliders/HorizontalSliderPreview.tsx","components/sliders/SkeletonLoader.tsx","components/sliders/Title.tsx"],"sourcesContent":["//AID.tsx\r\nimport { forwardRef, useRef, useState, useMemo, useCallback } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { aidPhotos } from \"../data/data\";\r\nimport HorizontalSlider, { getPerHorizontalPageValue } from './sliders/HorizontalSlider';\r\nimport Title from './sliders/Title';\r\nimport SiteContainerBackground from './sliders/SiteContainerBackground';\r\nimport HorizontalSliderPreview from './sliders/HorizontalSliderPreview';\r\n\r\nconst AID = forwardRef<HTMLDivElement>((_, ref) => {\r\n  const { t } = useTranslation(\"AID\");\r\n  const [selectedSlide] = useState(0);\r\n  const splideInstanceRef = useRef<Splide | null>(null);\r\n  const sliders = useMemo(() => (\r\n    aidPhotos\r\n      .map((photo) => photo?.img)\r\n      .filter((img): img is string => img !== undefined)\r\n  ), []);\r\n\r\n  const handlePreviewClick = useCallback((index: number) => {\r\n    if (splideInstanceRef.current) {\r\n      splideInstanceRef.current.go(index);\r\n    }\r\n  }, []);\r\n  return (\r\n    <div ref={ref}>\r\n    <SiteContainerBackground  id={`category${5}`} data-testid=\"aid-wrapper\" >\r\n      <Title text={t(\"aid_title\")} data-testid=\"aid_title\"/>\r\n      <HorizontalSlider photos={sliders} selectedSlide={selectedSlide} setSplideInstance={splide => splideInstanceRef.current = splide} />\r\n      <HorizontalSliderPreview photos={sliders} selectedSlide={selectedSlide} onPreviewClick={handlePreviewClick} getPerPageValue={getPerHorizontalPageValue} />\r\n    </SiteContainerBackground>\r\n    </div>\r\n    );\r\n  });\r\nexport default AID;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport SkeletonLoader from './SkeletonLoader'; // Импортируем компонент\r\n\r\ninterface SliderProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  setSplideInstance: (splide: Splide | null) => void;\r\n  autoplay?: boolean;\r\n}\r\n\r\nexport const getPerHorizontalPageValue = () => {\r\n  if (window.innerWidth < 640) {\r\n    return 2;\r\n  } else if (window.innerWidth < 768) {\r\n    return 3;\r\n  } else if (window.innerWidth < 1024) {\r\n    return 4;\r\n  } else if (window.innerWidth < 1280) {\r\n    return 5;\r\n  } else {\r\n    return 6;\r\n  }\r\n};\r\n\r\nconst HorizontalSlider = ({ photos, selectedSlide, setSplideInstance, autoplay = true }: SliderProps) => {\r\n  const splideRef = useRef<HTMLDivElement | null>(null);\r\n  const [loading, setLoading] = useState<boolean[]>(Array(photos.length).fill(true));\r\n\r\n  useEffect(() => {\r\n    if (splideRef.current) {\r\n      const splideInstance = new Splide(splideRef.current, {\r\n        type: \"slide\",\r\n        perPage: 1,\r\n        perMove: 1,\r\n        rewind: true,\r\n        arrows: true,\r\n        focus: \"center\",\r\n        pagination: true,\r\n        autoplay,\r\n        interval: 4000,\r\n      });\r\n\r\n      setSplideInstance(splideInstance);\r\n\r\n      splideInstance.on(\"mounted\", () => {\r\n        splideInstance.go(selectedSlide);\r\n      });\r\n\r\n      splideInstance.mount();\r\n\r\n      return () => {\r\n        splideInstance.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, setSplideInstance, autoplay]);\r\n\r\n  const handleImageLoad = (index: number) => {\r\n    setLoading((prevLoading) => {\r\n      const newLoading = [...prevLoading];\r\n      newLoading[index] = false;\r\n      return newLoading;\r\n    });\r\n  };\r\n  const commonStyles = \"ssm:h-[440px] lg:h-[600px] xl:h-[700px] w-full object-cover rounded-lg\";\r\n  return (\r\n      <section id=\"horizontal_thumbnail_carousel\" ref={splideRef} className=\"splide pb-2 pt-0.5\">\r\n        <div className=\"splide__track rounded-2xl\">\r\n          <ul className=\"splide__list\">\r\n            {photos.map((photo, slideIndex) => (\r\n                <li key={slideIndex} className={`splide__slide`} onContextMenu={(e) => e.preventDefault()}>\r\n                  {loading[slideIndex] && (\r\n                      <SkeletonLoader className={commonStyles} />\r\n                  )}\r\n                  <img\r\n                      className={`duration-300 ease-out ${commonStyles} ${loading[slideIndex] ? 'hidden' : ''}`}\r\n                      src={photo}\r\n                      alt={`Slide ${slideIndex}`}\r\n                      onLoad={() => handleImageLoad(slideIndex)}\r\n                  />\r\n                </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSlider;\r\n","// HorizontalSliderPreview.tsx\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport SkeletonLoader from './SkeletonLoader'; // Import SkeletonLoader\r\n\r\ninterface PreviewSliderHorizontalProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  onPreviewClick: (index: number) => void;\r\n  getPerPageValue: () => number;\r\n}\r\n\r\nconst HorizontalSliderPreview = ({ photos, selectedSlide, onPreviewClick, getPerPageValue }: PreviewSliderHorizontalProps) => {\r\n  const previewSplideRef = useRef<HTMLDivElement | null>(null);\r\n  const [loading, setLoading] = useState<boolean[]>(Array(photos.length).fill(true));\r\n\r\n  useEffect(() => {\r\n    if (previewSplideRef.current) {\r\n      const previewSplide = new Splide(previewSplideRef.current, {\r\n        type: \"slide\",\r\n        perPage: getPerPageValue(),\r\n        gap: 5,\r\n        rewind: true,\r\n        pagination: false,\r\n        focus: \"center\",\r\n      });\r\n\r\n      previewSplide.on(\"mounted\", () => {\r\n        const slides = previewSplideRef.current!.querySelectorAll(\".splide__slide\");\r\n        slides.forEach((slide, index) => {\r\n          slide.addEventListener(\"click\", () => {\r\n            onPreviewClick(index);\r\n          });\r\n        });\r\n      });\r\n\r\n      previewSplide.mount();\r\n\r\n      const handleResize = () => {\r\n        const newPerPage = getPerPageValue();\r\n        previewSplide.go(selectedSlide);\r\n        previewSplide.options.perPage = newPerPage;\r\n        previewSplide.refresh();\r\n      };\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n        previewSplide.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, getPerPageValue, onPreviewClick]);\r\n\r\n  const handleImageLoad = (index: number) => {\r\n    setLoading((prevLoading) => {\r\n      const newLoading = [...prevLoading];\r\n      newLoading[index] = false;\r\n      return newLoading;\r\n    });\r\n  };\r\n\r\n  const commonStyles = \"h-[100px] w-full object-cover rounded-2xl\";\r\n  return (\r\n      <section id=\"thumbnail_carousel_preview\" ref={previewSplideRef} className=\"splide\">\r\n        <div className=\"splide__track\">\r\n          <ul className=\"splide__list\">\r\n            {photos.map((photo, previewIndex) => (\r\n                <li\r\n                    key={previewIndex}\r\n                    className=\"splide__slide\"\r\n                    onClick={() => onPreviewClick(previewIndex)}\r\n                    onContextMenu={(e) => e.preventDefault()}\r\n                >\r\n                  {loading[previewIndex] && (\r\n                      <SkeletonLoader className={commonStyles} />\r\n                  )}\r\n                  <img\r\n                      className={`duration-300 ease-out ${commonStyles} ${loading[previewIndex] ? 'hidden' : ''}`}\r\n                      src={photo}\r\n                      alt={`Preview ${previewIndex}`}\r\n                      onLoad={() => handleImageLoad(previewIndex)}\r\n                  />\r\n                </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSliderPreview;\r\n","// SkeletonLoader.tsx\r\nimport React from \"react\";\r\n\r\ninterface SkeletonLoaderProps {\r\n    className?: string;\r\n}\r\n\r\nconst SkeletonLoader: React.FC<SkeletonLoaderProps> = ({ className }) => {\r\n    return (\r\n        <div className={`animate-pulse bg-gray-300 ${className}`}>\r\n            {/* Пустой div для отображения скелетон-лоадера */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SkeletonLoader;\r\n","// Title.tsx\r\nimport React from 'react';\r\n\r\ninterface TitleProps {\r\n  text: string;\r\n}\r\n\r\nconst Title: React.FC<TitleProps> = ({ text }) => (\r\n  <h3 className=\"flex justify-center mb-1 uppercase\" >\r\n    <span className=\"w-full justify-center ssm:py-2 sm:py-[0px] ssm:h-[29px] sm:h-[31px] md:h-[38px] flex text-white  bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 border-blue-600 shadow-lg shadow-blue-500/50 ssm:rounded-[12px] md:rounded-[15px]\">\r\n      <span className=\"text-white ssm:text-[22px] md:text-[26px] xl:text-[30px] ssm:-mt-[11px] sm:-mt-0.5 md:-mt-0.5 lg:-mt-0.5 xl:-mt-[4px] mx-4\">\r\n        {text}\r\n      </span>\r\n    </span>\r\n  </h3>\r\n);\r\n\r\nexport default Title;"],"names":["forwardRef","_","ref","t","useTranslation","selectedSlide","useState","splideInstanceRef","useRef","sliders","useMemo","aidPhotos","map","photo","img","filter","undefined","handlePreviewClick","useCallback","index","current","go","_jsx","children","_jsxs","SiteContainerBackground","id","Title","text","HorizontalSlider","photos","setSplideInstance","splide","HorizontalSliderPreview","onPreviewClick","getPerPageValue","getPerHorizontalPageValue","window","innerWidth","_ref","autoplay","splideRef","loading","setLoading","Array","length","fill","useEffect","splideInstance","Splide","type","perPage","perMove","rewind","arrows","focus","pagination","interval","on","mount","destroy","commonStyles","className","slideIndex","onContextMenu","e","preventDefault","SkeletonLoader","src","alt","onLoad","handleImageLoad","prevLoading","newLoading","previewSplideRef","previewSplide","gap","querySelectorAll","forEach","slide","addEventListener","handleResize","newPerPage","options","refresh","removeEventListener","previewIndex","onClick"],"sourceRoot":""}