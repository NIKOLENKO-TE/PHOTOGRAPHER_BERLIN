{"version":3,"file":"static/js/610.f1551d46.chunk.js","mappings":"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","sources":["components/Childrens.tsx","components/sliders/HorizontalSlider.tsx","components/sliders/HorizontalSliderPreview.tsx","components/sliders/Title.tsx"],"sourcesContent":["//Childrens.tsx\r\nimport { forwardRef, useRef, useState, useMemo, useCallback } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { childrensPhotos } from \"../data/data\";\r\nimport HorizontalSlider, { getPerHorizontalPageValue } from './sliders/HorizontalSlider';\r\nimport Title from './sliders/Title';\r\nimport SiteContainerBackground from './sliders/SiteContainerBackground';\r\nimport HorizontalSliderPreview from './sliders/HorizontalSliderPreview';\r\n\r\nconst Childrens = forwardRef<HTMLDivElement>((_, ref) => {\r\n  const { t } = useTranslation(\"Childrens\");\r\n  const [selectedSlide] = useState(0);\r\n  const splideInstanceRef = useRef<Splide | null>(null);\r\n  const sliders = useMemo(() => (\r\n    childrensPhotos\r\n      .map((photo) => photo?.img)\r\n      .filter((img): img is string => img !== undefined)\r\n  ), []);\r\n\r\n  const handlePreviewClick = useCallback((index: number) => {\r\n    if (splideInstanceRef.current) {\r\n      splideInstanceRef.current.go(index);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={ref}>\r\n      <SiteContainerBackground id={`category${2}`} data-testid=\"childrens-wrapper\">\r\n        <Title text={t(\"childrens_title\")} data-testid=\"childrens_title\" />\r\n        <HorizontalSlider photos={sliders} selectedSlide={selectedSlide} setSplideInstance={splide => splideInstanceRef.current = splide} autoplay={false} />\r\n        <HorizontalSliderPreview photos={sliders} selectedSlide={selectedSlide} onPreviewClick={handlePreviewClick} getPerPageValue={getPerHorizontalPageValue} />\r\n      </SiteContainerBackground>\r\n    </div>\r\n  );\r\n});\r\nexport default Childrens;","//HorizontalSlider.tsx\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\n\r\ninterface SliderProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  setSplideInstance: (splide: Splide | null) => void;\r\n  autoplay?: boolean;\r\n}\r\n\r\nexport const getPerHorizontalPageValue = () => {\r\n  if (window.innerWidth < 640) {\r\n    return 2;\r\n  } else if (window.innerWidth < 768) {\r\n    return 3;\r\n  } else if (window.innerWidth < 1024) {\r\n    return 4;\r\n  } else if (window.innerWidth < 1280) {\r\n    return 5;\r\n  } else {\r\n    return 6;\r\n  }\r\n};\r\n\r\nconst HorizontalSlider = ({ photos, selectedSlide, setSplideInstance, autoplay = true }: SliderProps) => {\r\n  const splideRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (splideRef.current) {\r\n      const splideInstance = new Splide(splideRef.current, {\r\n        type: \"slide\",\r\n        perPage: 1,\r\n        perMove: 1,\r\n        rewind: true,\r\n        arrows: true,\r\n        focus: \"center\",\r\n        pagination: true,\r\n        autoplay,\r\n        interval: 4000,\r\n      });\r\n  \r\n      setSplideInstance(splideInstance);\r\n  \r\n      splideInstance.on(\"mounted\", () => {\r\n        splideInstance.go(selectedSlide);\r\n      });\r\n  \r\n      splideInstance.mount();\r\n  \r\n      return () => {\r\n        splideInstance.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, setSplideInstance, autoplay]);\r\n\r\n  return (\r\n    <section id=\"horizontal_thumbnail_carousel\" ref={splideRef} className=\"splide pb-2 pt-0.5\">\r\n      <div className=\"splide__track rounded-2xl\">\r\n        <ul className=\"splide__list\">\r\n          {photos.map((photo, slideIndex) => (\r\n            <li key={slideIndex} className={`splide__slide`} onContextMenu={(e) => e.preventDefault()}>\r\n              <img className=\"ssm:h-[440px] lg:h-[600px] xl:h-[700px] w-full object-cover duration-300 ease-out\" src={photo} alt={`Slide ${slideIndex}`} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSlider;","//PreviewSliderHorizontal.tsx\r\nimport { useEffect, useRef } from \"react\";\r\nimport { Splide } from \"@splidejs/splide\";\r\n\r\ninterface PreviewSliderHorizontalProps {\r\n  photos: string[];\r\n  selectedSlide: number;\r\n  onPreviewClick: (index: number) => void;\r\n  getPerPageValue: () => number;\r\n}\r\n\r\nconst HorizontalSliderPreview = ({ photos, selectedSlide, onPreviewClick, getPerPageValue }: PreviewSliderHorizontalProps) => {\r\n  const previewSplideRef = useRef<HTMLDivElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (previewSplideRef.current) {\r\n      const previewSplide = new Splide(previewSplideRef.current, {\r\n        type: \"slide\",\r\n        perPage: getPerPageValue(),\r\n        gap: 5,\r\n        rewind: true,\r\n        pagination: false,\r\n        focus: \"center\",\r\n      });\r\n\r\n      previewSplide.on(\"mounted\", () => {\r\n        const slides = previewSplideRef.current!.querySelectorAll(\".splide__slide\");\r\n        slides.forEach((slide, index) => {\r\n          slide.addEventListener(\"click\", () => {\r\n            onPreviewClick(index);\r\n          });\r\n        });\r\n      });\r\n\r\n      previewSplide.mount();\r\n\r\n      const handleResize = () => {\r\n        const newPerPage = getPerPageValue();\r\n        previewSplide.go(selectedSlide);\r\n        previewSplide.options.perPage = newPerPage;\r\n        previewSplide.refresh();\r\n      };\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize);\r\n        previewSplide.destroy();\r\n      };\r\n    }\r\n  }, [selectedSlide, getPerPageValue, onPreviewClick]);\r\n\r\n  return (\r\n    <section id=\"thumbnail_carousel_preview\" ref={previewSplideRef} className=\"splide\">\r\n      <div className=\"splide__track\">\r\n        <ul className=\"splide__list\">\r\n          {photos.map((photo, previewIndex) => (\r\n            <li key={previewIndex} className={`splide__slide`} onClick={() => onPreviewClick(previewIndex)} onContextMenu={(e) => e.preventDefault()}>\r\n              <img className=\"h-[100px] w-full object-cover rounded-2xl\" src={photo} alt={`Preview ${previewIndex}`} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default HorizontalSliderPreview;","// Title.tsx\r\nimport React from 'react';\r\n\r\ninterface TitleProps {\r\n  text: string;\r\n}\r\n\r\nconst Title: React.FC<TitleProps> = ({ text }) => (\r\n  <h3 className=\"flex justify-center mb-1 uppercase\" >\r\n    <span className=\"w-full justify-center ssm:py-2 sm:py-[0px] ssm:h-[29px] sm:h-[31px] md:h-[38px] flex text-white  bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 border-blue-600 shadow-lg shadow-blue-500/50 ssm:rounded-[12px] md:rounded-[15px]\">\r\n      <span className=\"text-white ssm:text-[22px] md:text-[26px] xl:text-[30px] ssm:-mt-[11px] sm:-mt-0.5 md:-mt-0.5 lg:-mt-0.5 xl:-mt-[4px] mx-4\">\r\n        {text}\r\n      </span>\r\n    </span>\r\n  </h3>\r\n);\r\n\r\nexport default Title;"],"names":["forwardRef","_","ref","t","useTranslation","selectedSlide","useState","splideInstanceRef","useRef","sliders","useMemo","childrensPhotos","map","photo","img","filter","undefined","handlePreviewClick","useCallback","index","current","go","_jsx","children","_jsxs","SiteContainerBackground","id","concat","Title","text","HorizontalSlider","photos","setSplideInstance","splide","autoplay","HorizontalSliderPreview","onPreviewClick","getPerPageValue","getPerHorizontalPageValue","window","innerWidth","_ref","splideRef","useEffect","splideInstance","Splide","type","perPage","perMove","rewind","arrows","focus","pagination","interval","on","mount","destroy","className","slideIndex","onContextMenu","e","preventDefault","src","alt","previewSplideRef","previewSplide","gap","querySelectorAll","forEach","slide","addEventListener","handleResize","newPerPage","options","refresh","removeEventListener","previewIndex","onClick"],"sourceRoot":""}